/**
 This Source Code Form is subject to the terms of the Mozilla Public
 License, v. 2.0, as well as to the Additional Term regarding proper
 attribution. The latter is located in Term 11 of the License.
 If a copy of the MPL with the Additional Term was not distributed
 with this file, You can obtain one at http://static.fuzzhq.com/licenses/MPL
 */
package fuzz.com.skeleton.class_builder;


import java.io.File;

import fuzz.com.skeleton.IdData;
import fuzz.com.skeleton.XMLInspector;

/**
 * Convert XMLInspector to string representing java class file.
 */
public class ClassBuilder {

	private XMLInspector inspector;
	public final String className;
    private final String packageName;
    private final String generatePackageName;

    public ClassBuilder(String packageName, String generatePackageName, XMLInspector inspector){
        this.packageName = packageName;
        this.generatePackageName = generatePackageName;
		this.inspector = inspector;
		className = getClassName(getFileName(inspector.xmlFile));
	}
	
	public String build(){
		StringBuilder declarations = new StringBuilder();
		StringBuilder initialization = new StringBuilder();
		StringBuilder imports = new StringBuilder();


        addStaticImports(imports);
		
		for (IdData idData : inspector.ids) {
			declarations.append(addValueDeclaration(idData));
			initialization.append(addInitializationValue(idData));
		}

        StringBuilder stringBuilder = new StringBuilder();
		
		stringBuilder.append("package ").append(generatePackageName).append(";\n\n");
		stringBuilder.append(imports).append("\n");
		addAutoGeneratedComment(stringBuilder);
		stringBuilder.append("public class ").append(className).append(" extends ResourcesLayout{\n\n");
		stringBuilder.append(declarations);
        stringBuilder.append("\n");
		addInflaterConstrictor(initialization, stringBuilder);
		addViewConstructor(initialization, stringBuilder);
		
		stringBuilder.append("}");
		return stringBuilder.toString();
	}

    private void addStaticImports(StringBuilder imports) {
        for (String importPath : ImportsMap.map) {
            imports.append(addImport(importPath));
        }

        imports.append(addImport(packageName + ".R"));
    }

    private void addAutoGeneratedComment(StringBuilder stringBuilder) {
		stringBuilder.append("/** AUTO-GENERATED FILE.  DO NOT MODIFY.\n");
		stringBuilder.append(" *\n");
		stringBuilder.append(" * This class was automatically generated by the\n");
		stringBuilder.append(" * resources tool from the resource data it found.  It\n");
		stringBuilder.append(" * should not be modified by hand.\n");
		stringBuilder.append("*/\n");
	}

	private void addViewConstructor(StringBuilder initialization,
                                    StringBuilder stringBuilder) {
		stringBuilder.append("\tpublic ").append(className).append("(View view){\n");
		stringBuilder.append("\t\tsuper(view);\n\n");
		stringBuilder.append(initialization);
		stringBuilder.append("\t}\n");
	}

    private void addInflaterConstrictor(StringBuilder initialization,
                                        StringBuilder stringBuilder) {
        stringBuilder.append("\tpublic ").append(className).append("(LayoutInflater inflater, android.view.ViewGroup container, Boolean addToRoot){\n");
        stringBuilder.append("\t\tsuper(inflater.inflate(R.layout.").append(getFileName(inspector.xmlFile)).append(", container, addToRoot));\n\n");
        stringBuilder.append(initialization);
        stringBuilder.append("\t}\n\n");
    }
	
	private String addImport(String importData) {
		return "import " + importData + ";\n";
	}
	
	private String getClassName(String fileName) {
		fileName = toJavaStyle(fileName);
        if(!fileName.endsWith("Layout")){
            fileName += "_Layout";
        }
		return fileName;
	}

	private String toJavaStyle(String fileName) {
		fileName = toUpperCase(fileName, 0)+ fileName.substring(1);
		int underLineIndex = fileName.indexOf("_");
		while(underLineIndex != -1){
			fileName = fileName.substring(0, underLineIndex) + toUpperCase(fileName, underLineIndex + 1) + fileName.substring(underLineIndex+ 2);
			underLineIndex = fileName.indexOf("_");
		}
		return fileName;
	}

	private char toUpperCase(String input, int index) {
		return Character.toUpperCase(input.charAt(index));
	}

	public static String getFileName (File file) {
        String name = file.getName();
        return name.substring(0, name.lastIndexOf("."));
    }

    private String addInitializationValue(IdData idData) {
        if(idData.layout == null){
            return "\t\tthis." + idData.name + " = (" + idData.element + ")" + "view.findViewById(R.id." + idData.name + ");\n";
        }
        else{
            return "\t\tthis." + idData.name + " = new " + getClassName(idData.layout) + "(" + "view.findViewById(R.id." + idData.name + "));\n";
        }
    }

	private String addValueDeclaration(IdData idData) {
		String valeType = idData.layout != null ? getClassName(idData.layout) : idData.element;
		return "\tpublic final " + valeType + " " + idData.name + ";\n";
	}
}
