/**
 This Source Code Form is subject to the terms of the Mozilla Public
 License, v. 2.0, as well as to the Additional Term regarding proper
 attribution. The latter is located in Term 11 of the License.
 If a copy of the MPL with the Additional Term was not distributed
 with this file, You can obtain one at http://static.fuzzhq.com/licenses/MPL
 */
package fuzz.com.skeleton;

import org.gradle.api.Action;
import org.gradle.api.Plugin;
import org.gradle.api.Project;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

import fuzz.com.skeleton.loger.Logger;


public class Main implements Plugin<Project> {

    private ProjectInspector projectInspector;

    @Override
    public void apply(final Project project) {
        project.afterEvaluate(new Action<Project>() {
            @Override
            public void execute(Project project) {
                try {
                    onExecute(project);
                }
                catch (Throwable throwable){
                    Logger.log(throwable.getMessage());
                    Logger.log(throwable.toString());
                    throwable.printStackTrace();
                }
            }

            private void onExecute(Project project) {
                long startingTime = System.currentTimeMillis();
                projectInspector = new ProjectInspector();
                projectInspector.init(project);
                try {
                    ArrayList<XMLInspector> xmlInspectors = new ArrayList<XMLInspector>();
                    for (int i = 0; i < projectInspector.getFlavorsCount(); i++) {
                        projectInspector.setActiveFlavor(i);
                        FilesManger.instance.init(projectInspector);
                        ArrayList<String> allFiles = FilesManger.instance.getAllFiles();

                        for (String path : allFiles) {
                            XMLInspector xmlInspector = new XMLInspector(new File(path));
                            xmlInspector.parse();
                            xmlInspectors.add(xmlInspector);
                        }
                    }
                    projectInspector.setMainFlavor();
                    FilesManger.instance.init(projectInspector);
                    FilesManger.instance.mkdirs();
                    new ClassWriter().write(projectInspector, xmlInspectors);
                } catch (IOException e) {
                    e.printStackTrace();
                }
                if (projectInspector.getActiveFlavor().getAbsolutePath().endsWith("main")) {
                    addResourcesBaseClass();
                }

                Logger.log("Completed in " + (System.currentTimeMillis() - startingTime));
            }

            private void addResourcesBaseClass() {
                File file = new File(FilesManger.instance.getRoot(), "ResourcesLayout.java");
                BufferedWriter out = null;
                try {
                    try {
                        out = new BufferedWriter(new FileWriter(file));
                        out.write("package " + projectInspector.getPackageName() + ".resources;\n" +
                                "\n" +
                                "import android.view.View;\n" +
                                "\n" +
                                "/** AUTO-GENERATED FILE.  DO NOT MODIFY.\n" +
                                " *\n" +
                                " * This class was automatically generated by the\n" +
                                " * resources tool from the resource data it found.  It\n" +
                                " * should not be modified by hand.\n" +
                                " */\n" +
                                "public class ResourcesLayout {\n" +
                                "    public final View view;\n" +
                                "\n" +
                                "    public ResourcesLayout(View view) {\n" +
                                "        this.view = view;\n" +
                                "    }\n" +
                                "}\n");
                    } catch (IOException e) {
                        e.printStackTrace();
                    }

                } finally {
                    if (out != null) {
                        try {
                            out.close();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        });
    }
}
